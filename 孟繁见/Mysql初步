数据库（database）：存放数据的仓库？
数据库（database）：高效的存放和处理数据的介质。（内存RAM ，磁盘ROM）
面向对象：以对象为主体，面向集合就是以集合为主体。

关系型数据库：（SQL）安全，同步到磁盘；易理解；以二维表存储，浪费空间。
非关系型数据库：（NOSQL）在内存中运行；断电会丢失。

关系型数据库：建立在一个关系模型(数据模型)上的数据库。
关系模型：
	数据结构：存储数据，二维表（有表头，有数据）。
	操作指令集和：SQL的所有语句
	完整性约束：表内数据约束，表与表的约束
1.实体（数据模型）：老师 学生 班级----类名    每个类我都能画一个表，
2.实体的内部联系（虚体）：姓名性别年龄---构造类的属性  把你们的属性填在表里， 没有我要空着，浪费空间也没办法，说不上你啥时候填上来。
二维表角度（结构/数据本身）：
（row/record）一行记录着一个对象完整信息，
  (column/field)一列是同一个属性。
3.实体之间的联系：学生需要新加一个属性为所在班级，班级中要说明指向教室。


SQL语言（结构化查询语言）：关系型数据库指令
DDL：维护存储数据的结构。create drop alter
DML:对表内的数据进行操作。insert delete update 
	DQL：数据查询语言 select
DCL:数据控制语言，负责管理权限，grant revoke

MySQL是个图书馆，根据分类分很多区，每个区可以看作一个数据库。
MySQL数据库：C/S结构软件。若想访问服务器必须通过客户端。
1.客户连接服务器，认证身份
2.客户发送SQL指令
3.服务器接收并处理SQL指令，
4.客户接受了结果，
5.断开连接，释放资源，供别人使用，（服务器并发限制）

SQL的操作根据基本对象分为三类：

1）库操作：对数据库的增删改查。
<1>Create database 数据库名字 [库选项];
库选项：用来约束数据库，分为两个选项：
字符集设定：charset/character set 具体字符集（数据存储的编码格式） 常用字符集：GBK，UTF8。
校对集设定：collate 具体校对集（数据比较的规则）
注1：要使用关键字命名，必须使用反引号。
注2：使用中文数据库也是可以的，但是要保证其识别。（但所创建的文件夹会是乱码）

当我们创建数据库的SQL语句执行后，发生了什么？

1、在数据库系统中，增加了对应的数据库信息
2、会在保存数据的文件夹下：Data目录，创建一个对应的数据库名字的文件夹。
3、每个数据库下都有一个opt文件：保存了库选项。（字符集和校对集）

<2>删除数据库

drop database 数据库名字;

注：删除数据库需谨慎！这是不走回收站的删除。（应进行备份后进行删除操作）

<3>更新数据库（数据库名字不可修改；数据库的修改仅限库选项：字符集和校对集(校对集依赖字符集)）
Alter database 数据库名字 [库选项];charset/character set [=] 字符集、collate 校对集。

<4>查看数据库：

Show databases;（查看所有数据库）

模糊查询：Show database like 'pattern';	%：表示匹配多个字符。_：表示匹配单个字符。其中'_'需要被转义。
查看以information_开始的数据库:
①show databases like 'information_%';  相当于information%
②show databases like 'information\_%';

Show create database 数据库名字;（查看数据库的创建句子）

（2）表操作（包含字段操作，因为表与字段关联是离不开的）

<1>新增数据表（有点像结构体）
注：任何一个表的设计都需要指定数据库。
可以隐式制定：
use 数据库名；Create table [if no exists] 表名（
还可以显式指定：
Create table [if no exists] 数据库.表名（
字段名字 数据类型,
字段名字 数据类型     最后一行不a要逗号
！
）[表选项];
if no exists：如果表名不存在，就创建对应名字的表，否则不执行创建代码（称为检查功能）

表选项：控制表的表现。和库选项一样，包含字符集和校对集。

存储引擎：engine 具体的存储引擎（innodb和myisam）

当创建数据表的SQL指令执行后，到底发生了什么？

1、指定数据库下已经存在对应的表
2、在数据库对应的文件夹下，会产生对应表的结构文件（跟存储引擎有关系？)

<2>查看数据表

Show tables;（查看所有数据表）;

Show tables like 'pattern';(模糊查询)

Show create table 表名;（查看表的创建语句）

Desc/describe/show columns from 表名;（查看表结构：查看表中的字段信息）

<3>更新数据表（表可以修改的有：表名和表选项）

可以改表选项：字符集，校对集和存储引擎。
Alter table 表名 表选项 [=] 值;
还可以改表名：rename table 原表名 to 新表名字

修改字段：新增，修改，重名，删除。

1、新增字段
Alter table 表名 add [column] 字段名 数据类型 [列属性] [位置];

其中的“位置”：字段名可以存放在表中的任意位置First：第一个位置 
After：在某个字段之后；用法：after 字段名；默认的是最后一个字段之后。

2、修改字段：修改通常是修改属性或者数据类型
Alter table 表名 modify 字段名 数据类型 [属性] [位置];

3、重命名字段

Alter table 表名 change 旧字段 新字段 数据类型 [属性] [位置];

4、删除字段
Alter table 表名 drop 字段名;（还是要注意备份。。）
<4>删除数据表

Drop table 表名1,表名2...;   --- 可以一次性删除多张表

当删除数据表的指令执行之后，发生了什么？

1、在表空间中，没有了指定的表（表内数据也没了呀）
2、在数据库对应的文件夹下，表对应的文件（与存储引擎有关？）也会被删除。

（3）数据操作	

<1>方案一：给全表字段插入数据，不需要指定字段列表；
要求数据的值出现的顺序必须与表中设计的字段出现的顺序一致；
凡是非数值数据，都需要单引号包裹。

Insert into 表名 values(值列表)[,(值列表)];   -- 可以一次性插入多条记录！
方案二：给部分字段插入数据，需要选定字段列表；
字段列表出现的顺序与字段的顺序无关，但是值列表的顺序必须与选定的字段顺序一致。

Insert into 表名(字段列表) values (值列表)[,(值列表)];
